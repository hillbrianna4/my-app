[{"/Users/ThatBrianna/my-app/src/index.tsx":"1","/Users/ThatBrianna/my-app/src/reportWebVitals.ts":"2","/Users/ThatBrianna/my-app/src/App.tsx":"3","/Users/ThatBrianna/my-app/src/components/Questioncard.tsx":"4","/Users/ThatBrianna/my-app/src/API.ts":"5","/Users/ThatBrianna/my-app/src/utils.ts":"6","/Users/ThatBrianna/my-app/src/App.styles.ts":"7","/Users/ThatBrianna/my-app/src/components/Questioncard.styles.ts":"8"},{"size":201,"mtime":1609703168000,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1609702762000,"results":"11","hashOfConfig":"10"},{"size":2882,"mtime":1609716815000,"results":"12","hashOfConfig":"10"},{"size":1164,"mtime":1609714888000,"results":"13","hashOfConfig":"10"},{"size":851,"mtime":1609709000000,"results":"14","hashOfConfig":"10"},{"size":91,"mtime":1609708225000,"results":"15","hashOfConfig":"10"},{"size":1660,"mtime":1609717331000,"results":"16","hashOfConfig":"10"},{"size":1687,"mtime":1609718061000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"vrszgl",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ThatBrianna/my-app/src/index.tsx",[],["36","37"],"/Users/ThatBrianna/my-app/src/reportWebVitals.ts",[],"/Users/ThatBrianna/my-app/src/App.tsx",["38"],"import React, {useState} from 'react';\nimport {fetchQuizQuestions} from './API';\n\nimport Questioncard from './components/Questioncard';\n//Types\n\nimport{QuestionState, Difficulty} from \"./API\";\n\n//styles\nimport {GlobalStyle, Wrapper} from './App.styles';\n\n\nexport type AnswerObject = {\n  question:string;\n  answer:string;\n  correct:boolean;\n  correctAnswer:string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions]= useState<QuestionState[]>([]);\n  const [number, setNumbers]= useState(0);\n  const [userAnswers, setUserAnswers]= useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(questions);\n\n\n  const startTrivia = async ()=>{\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumbers(0);\n    setLoading(false);\n\n  };\nconst checkAnswer=(e: React.MouseEvent<HTMLButtonElement>)=> {\n  if (!gameOver){\n    //Users answer\n    const answer = e.currentTarget.value;\n    //check answer against correct value\n    const correct = questions[number].correct_answer === answer;\n    //add score if answer is correct\n    if(correct) setScore((prev) => prev +1);\n    //save answer in the array for user answers\n    const answerObject = {\n      question: questions[number].question,\n      answer,\n      correct,\n      correctAnswer: questions[number].correct_answer,\n    };\n    setUserAnswers((prev) => [... prev, answerObject]);\n\n  }\n\n};\n\nconst nextQuestion = ()=> {\n  //move on to the next question if not the last question\n  const nextQuestion = number +1;\n  if(nextQuestion=== TOTAL_QUESTIONS){\n    setGameOver(true);\n\n  }else{\n    setNumbers(nextQuestion);\n  }\n\n};\n\n  return (\n\n    <>\n    <GlobalStyle />\n    <Wrapper>\n    \n      <h1>React Quiz App</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ?(\n       \n      \n      <button className = \"start\" onClick={startTrivia}>\n      Start \n      </button>\n  ):null}\n      {!gameOver? <p className=\"score\">Score:{score}</p> : null}\n      {loading &&<p>Loading Questions...</p>}\n      {!loading && !gameOver && (\n\n\n      <Questioncard\n      questionNr = {number +1}\n      totalQuestions ={TOTAL_QUESTIONS}\n      question = {questions[number].question}\n      answers ={questions[number].answers}\n      userAnswer = {userAnswers ? userAnswers[number]: undefined}\n      callback={checkAnswer}\n      /> \n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS -1?(\n        <button className =\"next\" onClick ={nextQuestion}>\n        Next Question\n      </button>\n      ):null}\n      \n      </Wrapper>\n      </>\n  );\n}\n\nexport default App;\n","/Users/ThatBrianna/my-app/src/components/Questioncard.tsx",[],"/Users/ThatBrianna/my-app/src/API.ts",[],"/Users/ThatBrianna/my-app/src/utils.ts",[],"/Users/ThatBrianna/my-app/src/App.styles.ts",[],"/Users/ThatBrianna/my-app/src/components/Questioncard.styles.ts",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":65,"column":34,"nodeType":"45","messageId":"46","endLine":65,"endColumn":35,"fix":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"50","text":"51"},"no-global-assign","no-unsafe-negation",[1643,1644],""]