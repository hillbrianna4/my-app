{"version":3,"sources":["API.ts","utils.ts","components/Questioncard.styles.ts","components/Questioncard.tsx","images/lemons.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","Questioncard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumbers","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf02dd4c.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\n\n\nexport type Question ={\n    category:string;\n    correct_answer:string;\n    difficulty:string;\n    incorrect_answers: string[];\n    question:string;\n    type:string;\n}\n\nexport type QuestionState = Question & { answers: string[]};\n\nexport enum Difficulty{\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD= \"hard\",\n}\n\nexport const fetchQuizQuestions = async (amount:number, difficulty:Difficulty) => {\n    const endpoint = `http://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question )=>(\n        {\n            ...question, \n            answers: shuffleArray([\n                ...question.incorrect_answers,\n                 question.correct_answer,\n                ]),\n\n    }));\n};","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ffdd93;\n  border-radius: 10px;\n  border: 2px solid #ffda77;\n  padding: 20px;\n  box-shadow: 0px 5px 40px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 2rem;\n    color: #fceef5;\n    filter:drop-shadow(2px 5px #f3bad6);\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 1.7rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #fdcfdf, #ffabe1)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n\n  button:hover {\n    cursor: pointer;\n    user-select: none;\n    font-size: 1.7rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #ea86b6, #fca3cc)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n`;","import React from 'react';\n\n//Types\nimport{AnswerObject} from '../App';\n//Styles\nimport {Wrapper, ButtonWrapper} from './Questioncard.styles';\ntype Props = {\n    question: string;\n    answers: string[];\n    callback:(e: React.MouseEvent<HTMLButtonElement>)=>void;\n    userAnswer: AnswerObject | undefined;\n    questionNr:number;\n    totalQuestions:number;\n\n}\n\nconst Questioncard: React.FC<Props> = ({question, answers, callback, userAnswer, questionNr,totalQuestions\n}) => (\n<Wrapper>\n    <p className = \"number\">\n        Question:{questionNr} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML = {{__html:question}} />\n    <div>\n        {answers.map((answer) =>(\n            <ButtonWrapper \n            key ={answer}\n            correct={userAnswer?.correctAnswer===answer}\n            userClicked={userAnswer?.answer===answer}\n            \n            >\n            \n                <button disabled = {!!userAnswer}  value = {answer} onClick ={callback}>\n                    <span dangerouslySetInnerHTML ={{__html:answer}} />\n                </button>\n                </ButtonWrapper>\n        ))}\n\n    </div>\n</Wrapper>\n);\n\nexport default Questioncard;","export default __webpack_public_path__ + \"static/media/lemons.c97aa556.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\n//@ts-ignore\nimport BGImage from './images/lemons.jpg';\n\nexport const GlobalStyle =createGlobalStyle \n`\nhtml{\n    height:100%;\n}\n\nbody{\nbackground-image: url(${BGImage});\nbackground-size:cover;\nmargin:0;\npadding: 0 20px;\ndisplay: flex;\njustify-content:center;\n\n}\n\n*{\n    box-sizing:border-box;\n    font-family: Lobster;\n}\n\n\n`;\n\nexport const Wrapper = styled.div`\ndisplay:flex;\nflex-direction:column;\nalign-items:center;\n\n> p {\ncolor: #fff;\nfont-size: 2rem;\n}\n.score{\n    color:#fceef5;\n    font-size:2rem;\n    margin:0;\n    filter:drop-shadow(2px 5px #ffc85c);\n}\nh1{\n    font-family:'Sacramento';\n    background-image:linear-graident(180deg, #fff, #87f1ff);\n    background-size:100%;\n    background-clip:text;\n    --webkit-background-clip: text;\n    --webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter:drop-shadow(2px 5px #ffc85c);\n    font-size: 100px;\n    font-weight: 400;\n    text-align:center;\n    margin:20px;\n    color:#fceef5;\n}\n\n.start, .next{\n    cursor:pointer;\n    background:  #ffda77;\n    border: 2px solid #f9f7cf;\n    box-shadow:0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius:10px;\n    height:40px;\n    margin: 20px 0;\n    padding: 0 40px;\n    font-size:2rem;\n    color:#fceef5;\n}\n.start:hover, .next:hover{\n    cursor:pointer;\n    background:#ffc85c;\n    border: 2px solid #f9f7cf;\n    box-shadow:0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius:10px;\n    height:40px;\n    margin: 20px 0;\n    padding: 0 40px;\n    font-size:2rem; \n    transition:.5s;\n    color:#fff;\n}\n\n.start{\n    max-width:200px;\n}\n`;","import React, {useState} from 'react';\nimport {fetchQuizQuestions} from './API';\n\nimport Questioncard from './components/Questioncard';\n//Types\n\nimport{QuestionState, Difficulty} from \"./API\";\n\n//styles\nimport {GlobalStyle, Wrapper} from './App.styles';\n\n\nexport type AnswerObject = {\n  question:string;\n  answer:string;\n  correct:boolean;\n  correctAnswer:string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions]= useState<QuestionState[]>([]);\n  const [number, setNumbers]= useState(0);\n  const [userAnswers, setUserAnswers]= useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(questions);\n\n\n  const startTrivia = async ()=>{\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumbers(0);\n    setLoading(false);\n\n  };\nconst checkAnswer=(e: React.MouseEvent<HTMLButtonElement>)=> {\n  if (!gameOver){\n    //Users answer\n    const answer = e.currentTarget.value;\n    //check answer against correct value\n    const correct = questions[number].correct_answer === answer;\n    //add score if answer is correct\n    if(correct) setScore((prev) => prev +1);\n    //save answer in the array for user answers\n    const answerObject = {\n      question: questions[number].question,\n      answer,\n      correct,\n      correctAnswer: questions[number].correct_answer,\n    };\n    setUserAnswers((prev) => [... prev, answerObject]);\n\n  }\n\n};\n\nconst nextQuestion = ()=> {\n  //move on to the next question if not the last question\n  const nextQuestion = number +1;\n  if(nextQuestion=== TOTAL_QUESTIONS){\n    setGameOver(true);\n\n  }else{\n    setNumbers(nextQuestion);\n  }\n\n};\n\n  return (\n\n    <>\n    <GlobalStyle />\n    <Wrapper>\n    \n      <h1>React Quiz App</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ?(\n       \n      \n      <button className = \"start\" onClick={startTrivia}>\n      Start \n      </button>\n  ):null}\n      {!gameOver? <p className=\"score\">Score:{score}</p> : null}\n      {loading &&<p>Loading Questions...</p>}\n      {!loading && !gameOver && (\n\n\n      <Questioncard\n      questionNr = {number +1}\n      totalQuestions ={TOTAL_QUESTIONS}\n      question = {questions[number].question}\n      answers ={questions[number].answers}\n      userAnswer = {userAnswers ? userAnswers[number]: undefined}\n      callback={checkAnswer}\n      /> \n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS -1?(\n        <button className =\"next\" onClick ={nextQuestion}>\n        Next Question\n      </button>\n      ):null}\n      \n      </Wrapper>\n      </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}